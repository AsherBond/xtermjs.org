diff --git a/node_modules/gulp-typedoc/index.d.ts b/node_modules/gulp-typedoc/index.d.ts
index fe0b866..85e6536 100644
--- a/node_modules/gulp-typedoc/index.d.ts
+++ b/node_modules/gulp-typedoc/index.d.ts
@@ -1,6 +1,4 @@
 declare namespace gulpTypedoc {
-  type Logger = (message: string, level: number, newline: boolean) => void;
-
   /**
    * Typedoc options
    */
@@ -81,7 +79,7 @@ declare namespace gulpTypedoc {
     /**
      * Specify the npm plugins that should be loaded.
      */
-    plugins?: string[];
+    plugin?: string[] | string;
 
     /**
      * Do not print the TypeDoc link at the end of the page.
@@ -124,7 +122,7 @@ declare namespace gulpTypedoc {
 
     version?: boolean;
 
-    logger?: Logger | "none";
+    logLevel?: "none";
   }
 }
 
diff --git a/node_modules/gulp-typedoc/index.js b/node_modules/gulp-typedoc/index.js
index 94cd7c9..ff7f6e2 100644
--- a/node_modules/gulp-typedoc/index.js
+++ b/node_modules/gulp-typedoc/index.js
@@ -1,3 +1,4 @@
+// https://github.com/rogierschouten/gulp-typedoc/pull/60
 // Copyright (c) 2015 Rogier Schouten <github@workingcode.ninja>
 // License: ISC
 
@@ -13,72 +14,67 @@ const semver = require("semver");
 const PLUGIN_NAME = "gulp-typedoc";
 
 function typedoc(options) {
-	const files = [];
-	const opts = { ...options };
+  const files = [];
+  const opts = { ...options };
 
-	return es.through(function(file) {
-		files.push(file.path);
-	}, function() {
-		// end of stream, start typedoc
-		const stream = this;
+  return es.through(function(file) {
+    files.push(file.path);
+  }, async function() {
+    // end of stream, start typedoc
+    const stream = this;
 
-		if (files.length === 0) {
-			stream.emit("end");
-			return;
-		} else if (!opts.out && !opts.json) {
-			stream.emit("error", new PluginError(PLUGIN_NAME, "You must either specify the 'out' or 'json' option."));
-			stream.emit("end");
-			return;
-		} else {
-			const out = opts.out;
-			const json = opts.json;
-			const version = opts.version;
+    if (files.length === 0) {
+      stream.emit("end");
+      return;
+    } else if (!opts.out && !opts.json) {
+      stream.emit("error", new PluginError(PLUGIN_NAME, "You must either specify the 'out' or 'json' option."));
+      stream.emit("end");
+      return;
+    } else {
+      const out = opts.out;
+      const json = opts.json;
+      const version = opts.version;
 
-			if (!opts.logger) {
-				// reduce console logging
-				opts.logger = function(message, level, newline) {
-					if (level === 3) {
-						log(colors.red(message));
-					}
-				};
-			}
+      // typedoc instance
+      let app;
+      if (opts.plugin) {
+        app = await typedocModule.Application.bootstrapWithPlugins({ ...opts, entryPoints: files });
+      } else {
+        app = await typedocModule.Application.bootstrap({ ...opts, entryPoints: files });
+      }
+      if (semver.gte(typedocModule.Application.VERSION, '0.25.0')) {
+        app.options.addReader(new typedocModule.TSConfigReader());
+        app.options.addReader(new typedocModule.TypeDocReader());
+      }
 
-			// typedoc instance
-			const app = new typedocModule.Application();
-			if (semver.gte(typedocModule.Application.VERSION, '0.16.1')) {
-				app.options.addReader(new typedocModule.TSConfigReader());
-				app.options.addReader(new typedocModule.TypeDocReader());
-			}
-
-			if (version && opts.logger !== "none") {
-				log(app.toString());
-			}
-			try {
-				// Specify the entry points to be documented by TypeDoc.
-				app.bootstrap({ ...opts, entryPoints: files });
-				const project = app.convert();
-				if (project) {
-					if (out) app.generateDocs(project, out);  // TODO promisified!!
-					if (json) app.generateJson(project, json); // TODO promisified!!
-					if (app.logger.hasErrors()) {
-						stream.emit("error", new PluginError(PLUGIN_NAME, "There were errors generating TypeDoc output, see above."));
-						stream.emit("end");
-						return;
-					}
-				} else {
-					stream.emit("error", new PluginError(PLUGIN_NAME, "Failed to generate load TypeDoc project."));
-					stream.emit("end");
-					return;
-				}
-				stream.emit("end");
-				return;
-			} catch (e) {
-				stream.emit("error", e);
-				stream.emit("end");
-				return;
-			}
-		}
-	});
+      if (version && opts.logLevel !== "None") {
+        log(app.toString());
+      }
+      try {
+        // Specify the entry points to be documented by TypeDoc.
+        const project = await app.convert();
+        if (project) {
+          if (out) await app.generateDocs(project, out);  // TODO promisified!!
+          if (json) await app.generateJson(project, json); // TODO promisified!!
+          if (app.logger.hasErrors()) {
+            stream.emit("error", new PluginError(PLUGIN_NAME, "There were errors generating TypeDoc output, see above."));
+            stream.emit("end");
+            return;
+          }
+        } else {
+          stream.emit("error", new PluginError(PLUGIN_NAME, "Failed to generate load TypeDoc project."));
+          stream.emit("end");
+          return;
+        }
+        stream.emit("end");
+        return;
+      } catch (e) {
+        stream.emit("error", e);
+        stream.emit("end");
+        return;
+      }
+    }
+  });
 }
 
 module.exports = typedoc;
